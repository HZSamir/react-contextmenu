'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');

var _ContextMenu = require('../src/ContextMenu');var _ContextMenu2 = _interopRequireDefault(_ContextMenu);
var _actions = require('../src/actions');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ContextMenu tests', () => {
    test('shows when event with correct "id" is triggered', () => {
        const ID = 'CORRECT_ID';
        const x = 50;
        const y = 50;
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: ID }));


        expect(component).toMatchSnapshot();
        expect(component.state()).toEqual({ isVisible: false, x: 0, y: 0, forceSubMenuOpen: false, selectedItem: null });
        (0, _actions.showMenu)({ position: { x, y }, id: ID });
        expect(component.state()).toEqual({ isVisible: true, x, y, forceSubMenuOpen: false, selectedItem: null });
        expect(component).toMatchSnapshot();
        component.unmount();
    });

    test('does not shows when event with incorrect "id" is triggered', () => {
        const ID = 'CORRECT_ID';
        const x = 50;
        const y = 50;
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: ID }));


        expect(component).toMatchSnapshot();
        expect(component.state()).toEqual({ isVisible: false, x: 0, y: 0, forceSubMenuOpen: false, selectedItem: null });
        (0, _actions.showMenu)({ position: { x, y }, id: 'ID' });
        expect(component.state()).toEqual({ isVisible: false, x: 0, y: 0, forceSubMenuOpen: false, selectedItem: null });
        expect(component).toMatchSnapshot();
        component.unmount();
    });

    test('onShow and onHide are triggered correctly', () => {
        const data = { position: { x: 50, y: 50 }, id: 'CORRECT_ID' };
        const onShow = jest.fn();
        const onHide = jest.fn();
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: data.id, onShow: onShow, onHide: onHide }));


        (0, _actions.hideMenu)();
        (0, _actions.showMenu)(data);
        expect(component.state()).toEqual(Object.assign({ isVisible: true, forceSubMenuOpen: false, selectedItem: null }, data.position));
        expect(onShow).toHaveBeenCalled();
        (0, _actions.showMenu)(data);
        expect(onShow).toHaveBeenCalledTimes(1);
        expect(onHide).not.toHaveBeenCalled();
        (0, _actions.hideMenu)();
        expect(component.state()).toEqual(Object.assign({ isVisible: false, forceSubMenuOpen: false, selectedItem: null }, data.position));
        expect(onShow).toHaveBeenCalledTimes(1);
        expect(onHide).toHaveBeenCalledTimes(1);
        component.unmount();
    });

    test('menu should close on "Escape"', () => {
        const data = { position: { x: 50, y: 50 }, id: 'CORRECT_ID' };
        const onHide = jest.fn();
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: data.id, onHide: onHide }));

        const escape = new window.KeyboardEvent('keydown', { keyCode: 27 });

        (0, _actions.showMenu)(data);
        expect(component.state()).toEqual(Object.assign({ isVisible: true, forceSubMenuOpen: false, selectedItem: null }, data.position));
        document.dispatchEvent(escape);
        expect(component.state()).toEqual(Object.assign({ isVisible: false, forceSubMenuOpen: false, selectedItem: null }, data.position));
        expect(onHide).toHaveBeenCalled();
        component.unmount();
    });

    test('menu should close on "outside" click', () => {
        const data = { position: { x: 50, y: 50 }, id: 'CORRECT_ID' };
        const onHide = jest.fn();
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: data.id, onHide: onHide }));

        const outsideClick = new window.MouseEvent('mousedown', { target: document });

        (0, _actions.showMenu)(data);
        expect(component.state()).toEqual(Object.assign({ isVisible: true, forceSubMenuOpen: false, selectedItem: null }, data.position));
        component.simulate('mousedown');
        expect(component.state()).toEqual(Object.assign({ isVisible: true, forceSubMenuOpen: false, selectedItem: null }, data.position));
        document.dispatchEvent(outsideClick);
        expect(component.state()).toEqual(Object.assign({ isVisible: false, forceSubMenuOpen: false, selectedItem: null }, data.position));
        expect(onHide).toHaveBeenCalled();
        component.unmount();
    });

    test('hideOnLeave and onMouseLeave options', () => {
        const data = { position: { x: 50, y: 50 }, id: 'CORRECT_ID' };
        const onMouseLeave = jest.fn();
        const component = (0, _enzyme.mount)(
        _react2.default.createElement(_ContextMenu2.default, { id: data.id, hideOnLeave: true, onMouseLeave: onMouseLeave }));


        (0, _actions.showMenu)(data);
        expect(component.state()).toEqual(Object.assign({ isVisible: true, forceSubMenuOpen: false, selectedItem: null }, data.position));
        component.simulate('mouseleave');
        expect(component.state()).toEqual(Object.assign({ isVisible: false, forceSubMenuOpen: false, selectedItem: null }, data.position));
        expect(onMouseLeave).toHaveBeenCalled();
        component.unmount();
    });
});